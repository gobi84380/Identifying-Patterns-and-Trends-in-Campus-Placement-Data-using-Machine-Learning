# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-mnNhsW-EUQEl5CsSP0NqWU7AnTA-Sad
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,f1_score

dataset=pd.read_csv(r"/content/sample_data/flightdata.csv")
dataset.head()

dataset.info()

dataset=dataset.drop('Unnamed: 25',axis=1)
dataset.isnull().sum()

#filter the dataset to climinte columns that aren't relevant to a predictive model.
#dataset=dataset[["FL_NUM","MONTH","DAY_OF_MONTH","DAY_OF_WEEK","ORIGIN","DEST","CRS_ARR_TIME","DEP_DELIS","ARR_DELIS"]]
dataset.isnull().sum()

dataset[dataset.isnull().any(axis=1)].head(10)

#dataset['DEP_DELIS'].mode()

#replace the missing values with ls.
dataset=dataset.fillna({'ARR_DELIS':1})
dataset=dataset.fillna({'DEP_DELIS':0})
dataset.iloc[177:185]

import math
for index,row in dataset.iterrows():
  dataset.loc[index,'CRS_ARR_TIMS']=math.floor(row['CRS_ARR_TIME']/100)
dataset.head()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
dataset['DEST']=le.fit_transform(dataset['DEST'])
dataset['ORIGIN']=le.fit_transform(dataset['ORIGIN'])

dataset.head(5)

dataset['ORIGIN'].unique()

dataset=pd.get_dummies(dataset,columns=['ORIGIN','DEST'])
dataset.head()

x=dataset.iloc[:,0:8].values
y=dataset.iloc[:,8:9].values

x

from sklearn.preprocessing import OneHotEncoder
oh=OneHotEncoder()
z=oh.fit_transform(x[:,4:5]).toarray()
t=oh.fit_transform(x[:,5:6]).toarray()
#x=np.delete(x,[4,7],axis=1)

z

t

x=np.delete(x,[4,5],axis=1)

#flight_data.describe()

#sns.distplot(flight_data.MONTH)

#sns.scatterplot(x='ARR_DELAY',y='ARR_DEL15'data=flight_data)

#sns.catplot(x="ARR_DEL15",y="ARR_DELAY",kind='bar',data=flight_data)



sns.heatmap(dataset.corr())

#dataset=pd.get_dummies(dataset,columns=['ORIGIN','DEST'])
dataset.head()

x=dataset.iloc[:,0:8].values
y=dataset.iloc[:,8:9].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

#from sklearn.model_selection import train_test_split
#train_x,test_x,train_y,test_y=train_test_split(dataset.drop('ARR_DEL15',axis=1),df['ARR_DEL15'],test_size=0.2,random_state=0)

x_test.shape

x_train.shape

y_test.shape

y_train.shape

#from sklearn.preprocessing import StandardScaler
#sc=StandardScaler()
#x_train=sc.fit_transform(x_train)
#x_test=sc.transform(x_test)

#from sklearn.tree import DecisionTreeClassifier
#classifier=DecisionTreeClassifier(random_state=0)
#classifier.fit (x_train,y_train)

#decisiontree=classifier.predict(x_test)

#decisiontree

#from sklearn.metrics import accuracy_score
#desacc=accuracy_score(y_test,decisiontree)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators=10,criterion='entropy')

#rfc.fit(x_train,y_train)

#y_predict=rfc.predict(x_test)

#Importing the Keras libraries and packages
#import tensorflow
#from tesorflow.keras.models import Sequential
#from tesorflow.keras.layers import Dense

#Creating ANN skleton view
#classifiaction=Sequential()
#classification.add(Dense(30,activation='relu'))
#classification.add(Dense(128,activation='relu'))
#classification.add(Dense(64,activation='relu'))
#classification.add(Dense(32,activation='relu')
#classification.add(Dense(1,activation='sigmoid'))

#classification.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

classification.fit(x_train,y_train,batch_size=4,validation_slite=0.2,epochs=100)

# Decision tree
#y_pred=classifier.predict([[129,99,1,0,0,1,0,1,1,1,0,1,1,1,1,1]])
#print(y_pred)
#(y_pred)

#y_pred=rfc.predict([[129,99,1,0,0,1,0,1,1,1,0,1,1,1,1,1]])
#print(y_pred)
#(y_pred)

#classification.save(flight.hs)

#y_pred=classification.predict(x_test)

#y_pred

#y_pred=(y_pred>0.5)
#y_pred

def predict_exit(sample_value):
  sample_value=np.array(sample_value)
  sample_value=sample_value.reshape(1,-1)
  sample_value=sc.transform(sample_value)
  return classifier.predict(sample_value)

#test=classifiction.predidct([[1,1,121.000000,36.0,0,0,1,0,1,1,1,1,1,1,1,1]])
#if test==1:
 #print('Prediction:Chance of delay')
#else:
  #print('Prediction:No chance of delay.')

from sklearn import model_selection
from sklearn.neural_network import MLPClassifier

#dfs=[]
#models=[('RF',RandomForestClassifier()),
        #('DecisionTree',DecisionTreeClassifier()),
        #('ANN',MLPClassifier())
#]
#results=[]
#names=[]
#scoring=['accuracy','precision_weighted','recall_weightf1_weighted','roc_auc']
#target_names=['no delay','delay']
#for name,model in models:
  #kfold=model_selection.KFold(n_splits=5, shuffle=True, random_state=90210)
  #cv_results=model_selection.cross_validate(model, x_train, y_train, cv=kflod, scoring=scoring)
  #clf=model.fit(x_train, y_train)
  #y_pred=clf.predict(x_test)
  #print(name)
  #print(classification_report(y_test, y_pred, target_names=target_names))
  #results.append(cv_results)
  #names.append(name)
  #this_df=pd.DataFrame(cv_results)
  #this_df['model']=name
  #dfs.append(this_df)
#final=pd.concat (dft, ignore_index=True)
#return final

#print('Training accuracy: ',accuracy_score(y_train,y_predict_train))
#print('Testing accuracy: ',accuracy_score(y_test,y_predict))

#from sklearn.metrics import confusion_matrix
#cm=confusion_matrix(y_test, y_predict)
#cm

#from sklearn.metrics import accuracy_score
#desacc=accuracy_score(y_test,decisiontree)
#desacc

#from sklearn.metrics import confusion_matrix
#cm=confusion_matrix(y_test,decisiontree)
#cm

#from sklearn.metrics import accuracy_score,classification_report
#score = accuracy_score(y_pred,y_test)
#print('The accuracy for ANN model is:{}%'.format(score*100))

#from sklearn.metrics import confusion_matrix
#cm = confusion_matrix(y_test,y_pred)
#cm

parameters={
    'n_estimators':[1,20,30,55,68,74,90,120,115],
    'criterion':['gini','entropy'],
    'max_features':["auto","sqrt","log2"],
    'max_depth':[2,5,8,10],'verbose':[1,2,3,4,6,8,9,10]
}

#RCV=RandomizedSearchCV(estimator=rf,param_distributions=parameters,cv=10),n_iter=4)

#RVC.fit(x_train,y_train)

#bt_params=RCV.best_params_
#bt_score=RCV.best_score_

#bt_params

#bt_score

#model=RandomForestClassifier(verbose=10,n_estimators=120,max_features='log2',max_depth=10,criterion='entropy')
#RCV.fit(x_train,y_train)

#y_predict_rf=RCV.predict(x_test)

#RFC=accuracy_score(y_test,y_predict_rf)
#RFC

#import pickle
#pickle.dump(RCV,open('flight.pkl','wb'))

#importing the necessary dependencies
from flask import Flask,request,render_template
import numpy as np
import pandas as pd
import pickle
import os

#model=pickle.load(open('flight.pkl','rb'))
#app=Flask(_name_)#initializing the app

#@app.route('/')
#def home():
  #return render_template("index.html")
#@app.route('/prediction',methods=["POST"])

def predict():
  name=reqest.form['name']
  month=request.form['month']
  dayofmonth=request.form['dayofmonth']
  dayofweek=request.form['dayofweek']
  origin=request.form['origin']
  if(oring=="msp"):
    origin1,origin2,origin3,origin4,origin5=0,0,0,0,1
  if(origin=="dtw"):
    origin1,origin2,origin3,origin4,origin5=1,0,0,0,0
  if(origin=="jfk"):
    origin1,origin2,origin3,origin4,origin5=0,0,1,0,0
  if(origin=="sea"):
    origin1,origin2,origin3,origin4,origin5=0,1,0,0,0
  if(origin=="alt"):
    origin1,origin2,origin3,origin4,origin5=0,0,0,1,0

#destination=request.form['destination']
#if(destination=="msp"):
  #destination1,destination2,destination3,destination4,destination5=0,0,0,0,1
#if(destination=="dtw"):
  #destination1,destination2,destination3,destination4,destination5=1,0,0,0,0,0
#if(destination=="jfk"):
  #destination1,destination2,destination3,destination4,destination5=0,0,1,0,0
#if(destination=="sea"):
  #destination1,destination2,destination3,destination4,destination5=0,1,0,0,0
#if(destination=="alt"):
  #destination1,destination2,destination3,destination4,destination5=0,0,0,1,0
#dept=request.form['dept']
#arrtime=request.form['arrtime']
#actdept=request.form['actdept']
#dept15=int(dept)-int(actdept)
#total=[[name,month,dayofmonth,dayofweek,origin1,origin2,origin3,origin4,origin5,destination1,destination1,destination2,destination3,destination4,destination5]]
#print(total)
#y_pred=model.predict(total)
#print(y_pred)
#if(y_pred==[0.]):
  #ans="The Flight will be on time "
#else:
  #ans="The Flight will be delayed"
#return render_template("index.html",showcase=ans)

#if_name_=='_main_':
  #app.run(debug=True)

#*Sering Flask app "app"(lazy loading)
#*Environment:production
#WARNING:This is a development server.Do not use it in a production deployment.
#use a production WSGI server instead.
#*Debug mode:on
#*Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)